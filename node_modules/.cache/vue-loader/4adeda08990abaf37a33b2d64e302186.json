{"remainingRequest":"/Users/KerryCheng/final-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/KerryCheng/final-web/node_modules/pug-plain-loader/index.js!/Users/KerryCheng/final-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/KerryCheng/final-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/KerryCheng/final-web/src/components/includes/nav.vue?vue&type=template&id=747b9b22&lang=pug&","dependencies":[{"path":"/Users/KerryCheng/final-web/src/components/includes/nav.vue","mtime":1611489076530},{"path":"/Users/KerryCheng/final-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/KerryCheng/final-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/KerryCheng/final-web/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/Users/KerryCheng/final-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/KerryCheng/final-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}